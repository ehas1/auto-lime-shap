# -*- coding: utf-8 -*-
"""RL1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16SHErjfl6bRZmDjoJp0rXSRXmDi9erQK
"""

# RLProject.py
import os
os.system("pip install stable-baselines3[extra] 'shimmy>=2.0' gymnasium streamlit lime shap matplotlib")
import numpy as np
import gymnasium as gym
from stable_baselines3 import PPO
import streamlit as st
import matplotlib.pyplot as plt
import io
from lime.lime_tabular import LimeTabularExplainer
import shap

# Explainer utilities (previously in explainer_utils.py)
def load_model(path="models/cartpole_ppo"):
    return PPO.load(path)

def predict(states: np.ndarray) -> np.ndarray:
    """
    Predicts actions for a batch of states and returns one-hot action probabilities.
    """
    model = load_model()
    actions, _ = model.predict(states, deterministic=True)
    # One-hot encode the actions (assuming binary action space for CartPole)
    probs = np.zeros((len(actions), 2))  # 2 actions for CartPole: left (0) and right (1)
    for i, action in enumerate(actions):
        probs[i, action] = 1
    return probs

def get_background_states(n_samples=100):
    env = gym.make("CartPole-v1")
    return np.array([env.observation_space.sample() for _ in range(n_samples)])

def get_lime_explainer():
    bg = get_background_states()
    feature_names = ["cart_pos", "cart_vel", "pole_angle", "pole_ang_vel"]
    class_names = ["left", "right"]
    return LimeTabularExplainer(
        training_data=bg,
        feature_names=feature_names,
        class_names=class_names,
        discretize_continuous=True
    )

def get_shap_explainer():
    bg = get_background_states()
    return shap.KernelExplainer(predict, bg)

# Training functions
def train_and_save(total_timesteps=100_000, save_path="models/cartpole_ppo"):
    env = gym.make("CartPole-v1")
    model = PPO("MlpPolicy", env, verbose=1)
    model.learn(total_timesteps=total_timesteps)
    model.save(save_path)

# Streamlit app
def run_app():
    st.set_page_config(layout="centered")
    st.title("RL Policy Explainer: CartPole")

    # Sidebar: state sliders
    labels = ["Cart Position", "Cart Velocity", "Pole Angle", "Pole Angular Velocity"]
    ranges = [(-4.8, 4.8), (-5.0, 5.0), (-0.418, 0.418), (-5.0, 5.0)]
    state = np.array([
        st.sidebar.slider(label, float(low), float(high), float((low+high)/2))
        for label, (low, high) in zip(labels, ranges)
    ]).reshape(1, -1)

    # Explanation method
    method = st.sidebar.radio("Explain with", ["LIME", "SHAP"])

    # Cache explainers for performance
    @st.cache_resource
    def load_lime():
        return get_lime_explainer()

    @st.cache_resource
    def load_shap():
        return get_shap_explainer()

    if st.sidebar.button("Explain"):
        if method == "LIME":
            explainer = load_lime()
            exp = explainer.explain_instance(state[0], predict, num_features=4, top_labels=1)
            fig = exp.as_pyplot_figure(label=exp.available_labels()[0])
        else:
            explainer = load_shap()
            shap_vals = explainer.shap_values(state)
            fig, ax = plt.subplots()
            feature_names = ["cart_pos", "cart_vel", "pole_angle", "pole_ang_vel"]
            ax.bar(feature_names, shap_vals[0])
            ax.set_ylabel("SHAP value")
            ax.set_title("Feature attributions (SHAP)")
        st.pyplot(fig)

        # Download plot
        buf = io.BytesIO()
        fig.savefig(buf, format="png")
        buf.seek(0)
        st.download_button("Download Explanation", buf, file_name="explanation.png", mime="image/png")

if __name__ == "__main__":
    # Train model if needed
    # train_and_save()

    # Run Streamlit app
    run_app()